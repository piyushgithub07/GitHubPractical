#include <bits/stdc++.h>
using namespace std;

class node
{
        public:
           int data;
           node *left;
           node *right;
           node(int val)
           {
               data=val;left=NULL;right=NULL;
           }
};
//FUNCTION TO CALCULATE THE HEIGHT OF BINARY TREE
int maxdepth(node *node)
{
    if(node==NULL)
    {
        return 0;
    }
    else
    {
        int l=maxdepth(node->left);
        int r=maxdepth(node->right);
        if(l>r)
            return (l+1);
        else
            return (r+1);
    }
}
};
void preorder(node *root)
{
    if(root==NULL)
       return;
    stack<node*>s;
    s.push(root);
    while(s.empty()==false)
    {
        node* tmp=s.top();
        cout<<tmp->data;
        s.pop();
        if(tmp->right)
        {
            s.push(tmp->right);
        }
        if(tmp->left)
        {
            s.push(tmp->left);
        }
        
        
    }
}
void inorder(node* root)
{
    stack<node*>s;
    node* tmp=root;
    while(tmp!=NULL || s.empty()==false)
    {
        while(tmp!=NULL)
        {
            s.push(tmp);
            tmp=tmp->left;
            
        }
        tmp=s.top();
        s.pop();
        cout<<tmp->data<<" ";
        tmp=tmp->right;
    }
}
void postorder(node* root)
{
    if(root==NULL)
    {
        return;
        
    }
    stack<node*>s1,s2;
    s1.push(root);
    node* tmp;
    while(s1.empty()==false)
    {
        tmp=s1.top();
        s1.pop();
        s2.push(tmp);
        if(tmp->left)
         s1.push(tmp->left);
        if(tmp->right)
          s1.push(tmp->right);
    }
    while(s2.empty()==false)
    {
        tmp=s2.top();
        s2.pop();
        cout<<tmp->data<<" ";
    }
}
void lview(node* root)
{
    if(root==NULL)
        return;
    queue<node*>q;
    q.push(root);
    while(!q.empty())
    {
        int n=q.size();
        for(int i=1;i<=n;i++)
        {
            node* tmp=q.front();
            q.pop();
            if(i==1)
                cout<<tmp->data<<" ";
            if(tmp->left!=NULL)
            {
                q.push(tmp->left);
            }
            if(tmp->right!=NULL)
            {
                q.push(tmp->right);
            }
        }
    }
}
void rview(node* root)
{
    if(root==NULL)
        return;
    queue<node*>q;
    q.push(root);
    while(!q.empty())
    {
        int n=q.size();
        for(int i=1;i<=n;i++)
        {
            node* tmp=q.front();
            q.pop();
            if(i==n)
                cout<<tmp->data<<" ";
            if(tmp->left!=NULL)
            {
                q.push(tmp->left);
            }
            if(tmp->right!=NULL)
            {
                q.push(tmp->right);
            }
        }
    }
}
void levelordert(node *root)
{
    if(root==NULL)
     return;
     queue<node*>q;
     q.push(root);
     while(!q.empty())
     {
         node *node=q.front();
         cout<<node->data<<" ";
         q.pop();
         if(node->left!=NULL)
            q.push(node->left);
         if(node->right!=NULL)
         {
             q.push(node->right);
             
         }
     }
}
void printspiral(node* root)
{
    if(root==NULL) return;
    stack<node*>s1,s2;
    s1.push(root);
    while(!s1.empty() || !s2.empty())
    {
        while(!s1.empty())
        {
            node* tmp=s1.top();
            cout<<tmp->data<<" ";
            s1.pop();
            if(tmp->right)
                s2.push(tmp->right);
            if(tmp->left)
                s2.push(tmp->left);
                
        }
        while(!s2.empty())
        {
            node* tmp=s2.top();
            cout<<tmp->data<<" ";
            s2.pop();
            if(tmp->left) s1.push(tmp->left);
            if(tmp->right) s1.push(tmp->right);
        }
    }
}
int sumofnodeatkthlevel(node* root,int k)
{
    if(root==NULL)
        return 0;
    queue<node*>q;
    q.push(root);
    int level=0;
    int sum=0;
    int flag=0;
    while(!q.empty())
    {
        int size=q.size();
        while(size--)
        {
            node* tmp=q.front();
            q.pop();
            if(level==k)
            {
                flag=1;
                sum+=tmp->data;
                
            }
            else
            {
                if(tmp->left)
                    q.push(tmp->left);
                if(tmp->right)
                    q.push(tmp->right);
                    
            }
        }
        level++;
        if(flag==1)
            break;
    }
    return sum;
}
//to flatten a binary tree 
void flatten(node* root)
{
    if(root==NULL || (root->left==NULL &&root->right==NULL))
        return;
    if(root->left!=NULL)
    {
        flatten(root->left);
        node* tmp=root->right;
        root->right=root->left;
        root->left=NULL;
        node* t=root->right;
        while(t->right!=NULL)
        {
            t=t->right;
        }
        t->right=tmp;
        
    }
    flatten(root->right);
}//after calling this function call the inorder traversal


int tps(node* root,int val)
{
    if(root==NULL) return 0;
    val=(val*10+root->data);
    if(root->left==NULL && root->right==NULL)
    {
        return val;
    }
    return tps(root->left,val)+tps(root->right,val);

}

	
int main()
{
    node *root=new node(1);
    root->left=new node(2);
    root->right=new node(3);
    root->left->left=new node(4);
    root->left->right=new node(5);
    cout<<"Height of tree is:"<<maxdepth(root);
    return 0;
}